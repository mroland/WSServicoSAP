package br.com.atarde.wsservicosap.business;

import br.com.atarde.wsservicosap.dao.EasyclassNotaFiscalSaidaDAO;
import br.com.atarde.wsservicosap.model.CSTModel;
import br.com.atarde.wsservicosap.model.CategoriaModel;
import br.com.atarde.wsservicosap.model.EasyclassNotaFiscalSaidaLinhaModel;
import br.com.atarde.wsservicosap.model.EasyclassNotaFiscalSaidaModel;
import br.com.atarde.wsservicosap.model.NotaFiscalSaidaLinhaABModel;
import br.com.atarde.wsservicosap.model.StatusModel;
import br.com.atarde.wsservicosap.util.Constantes;
import br.com.topsys.exception.TSApplicationException;
import br.com.topsys.util.TSUtil;
import java.math.BigDecimal;
import java.util.List;


public class EasyclassNotaFiscalSaidaBusiness extends NotaFiscalSaidaBusiness {

    private StringBuilder info;

    private EasyclassNotaFiscalSaidaModel nota;

    public EasyclassNotaFiscalSaidaBusiness() {
    }

    public EasyclassNotaFiscalSaidaBusiness(EasyclassNotaFiscalSaidaModel easyclassNotaFiscalSaidaModel) {

        this.nota = easyclassNotaFiscalSaidaModel;

    }

    @Override
    public String validar() {

        StringBuilder retorno = new StringBuilder();

        EasyclassNotaFiscalSaidaLinhaModel linha;

        if (TSUtil.isEmpty(this.nota)) {

            return Constantes.NOTAFISCAL;

        } else {

            retorno.append(this.validarGlobal(this.nota));

            if ("".equals(retorno.toString())) {

                retorno.append(this.validaCliente(this.nota.getClienteModel()));

                if (this.nota.getOrigemModel().getId() != 1) {

                    retorno.append(Constantes.OBJETO_ORIGEM_EASYCLASS + "\n");

                }

                if (TSUtil.isEmpty(this.nota.getuComissaoAgencia())) {

                    retorno.append(Constantes.OBJETO_OBRIGATORIO_COMISSAO_AGENCIA + Constantes.CAMPO_OBRIGATORIO + "\n");

                }

                if (TSUtil.isEmpty(this.nota.getuDataPublicacaoFinal())) {

                    retorno.append(Constantes.OBJETO_OBRIGATORIO_NOTAFISCAL_U_DATA_PUBLICACAO_FINAL + Constantes.CAMPO_OBRIGATORIO + "\n");

                }

                if (TSUtil.isEmpty(this.nota.getuDiasPublicacao()) || (this.nota.getuDiasPublicacao().equals(""))) {

                    retorno.append(Constantes.OBJETO_OBRIGATORIO_NOTAFISCAL_U_DIAS_PUBLICACAO + Constantes.CAMPO_OBRIGATORIO + "\n");

                }

                if (TSUtil.isEmpty(this.nota.getUTituloPublicacao()) || (this.nota.getUTituloPublicacao().equals(""))) {

                    retorno.append(Constantes.OBJETO_OBRIGATORIO_NOTAFISCAL_U_TITULO_PUBLICACAO + Constantes.CAMPO_OBRIGATORIO + "\n");

                }
                
                if (!TSUtil.isEmpty(this.nota.getNotaFiscalSaidaLinhaModelList())) {

                    for (NotaFiscalSaidaLinhaABModel item : this.nota.getNotaFiscalSaidaLinhaModelList()) {

                        linha =  (EasyclassNotaFiscalSaidaLinhaModel) item;

                        if (TSUtil.isEmpty(linha.getValorUnitario()) || (linha.getValorUnitario().equals(BigDecimal.ZERO))) {

                            retorno.append(Constantes.OBJETO_OBRIGATORIO_NOTAFISCALSAIDA_LINHA_VALOR_UNITARIO + Constantes.CAMPO_OBRIGATORIO + "\n");

                        }

                        if (TSUtil.isEmpty(linha.getuValorUnitario()) || (linha.getuValorUnitario().equals(BigDecimal.ZERO))) {

                            retorno.append(Constantes.OBJETO_OBRIGATORIO_NOTAFISCALSAIDA_LINHA_U_VALOR_UNITARIO + Constantes.CAMPO_OBRIGATORIO + "\n");

                        }

                        if (TSUtil.isEmpty(linha.getuTotalCmXCol()) || (linha.getuTotalCmXCol().equals(BigDecimal.ZERO))) {

                            retorno.append(Constantes.OBJETO_OBRIGATORIO_NOTAFISCALSAIDA_LINHA_U_TOTAL_CMXCOL + Constantes.CAMPO_OBRIGATORIO + "\n");

                        }
                        
                        if (!TSUtil.isEmpty(linha.getCstICMSModel())) {

                            linha.getCstICMSModel().setCategoriaModel(new CategoriaBusiness().obterPeloCodigo(new CategoriaModel("codigo", "ICMS")));

                            if (TSUtil.isEmpty(new CSTBusiness().obterPeloCodigo(linha.getCstICMSModel()))) {

                                retorno.append(Constantes.CSTICMS_INEXISTENTE + "\n");

                            }

                        }else{
                            
                            linha.setCstICMSModel(new CSTModel());
                            
                        }

                        if (!TSUtil.isEmpty(linha.getCstCOFINSModel())) {

                            linha.getCstCOFINSModel().setCategoriaModel(new CategoriaBusiness().obterPeloCodigo(new CategoriaModel("codigo", "COFINS")));

                            if (TSUtil.isEmpty(new CSTBusiness().obterPeloCodigo(linha.getCstCOFINSModel()))) {

                                retorno.append(Constantes.CSTCOFINS_INEXISTENTE + "\n");

                            }

                        }else{
                            
                            linha.setCstCOFINSModel(new CSTModel());
                            
                        }

                        if (!TSUtil.isEmpty(linha.getCstIPIModel())) {

                            linha.getCstIPIModel().setCategoriaModel(new CategoriaBusiness().obterPeloCodigo(new CategoriaModel("codigo", "IPI")));
                            if (TSUtil.isEmpty(new CSTBusiness().obterPeloCodigo(linha.getCstIPIModel()))) {

                                retorno.append(Constantes.CSTIPI_INEXISTENTE + "\n");

                            }

                        }else{
                            
                            linha.setCstIPIModel(new CSTModel());
                            
                        }

                        if (!TSUtil.isEmpty(linha.getCstPISModel())) {

                            linha.getCstPISModel().setCategoriaModel(new CategoriaBusiness().obterPeloCodigo(new CategoriaModel("codigo", "PIS")));
                            if (TSUtil.isEmpty(new CSTBusiness().obterPeloCodigo(linha.getCstPISModel()))) {

                                retorno.append(Constantes.CSTPIS_INEXISTENTE + "\n");

                            }

                        }else{
                            
                            linha.setCstPISModel(new CSTModel());
                            
                        }
                        
                        
                    }


                }

            }

            return retorno.toString();


        }

    }

    @Override
    public String inserir() throws TSApplicationException {

        String retorno;

        this.nota.setStatusModel(new StatusModel(0L));

        new EasyclassNotaFiscalSaidaDAO().inserir(this.nota);

        retorno = null;

        return retorno;

    }

    public List<EasyclassNotaFiscalSaidaModel> pesquisar(EasyclassNotaFiscalSaidaModel model) throws TSApplicationException {

        this.info = new StringBuilder();

        if (this.validarPesquisar(model)) {

            return new EasyclassNotaFiscalSaidaDAO().pesquisar(model);

        } else {

            throw new TSApplicationException(this.info.toString());

        }

    }

    private Boolean validarPesquisar(EasyclassNotaFiscalSaidaModel model) {

        Boolean retorno = true;

        if (TSUtil.isEmpty(model)) {

            this.info.append(Constantes.EASYCLASSNOTAFISCALSAIDAMODEL + Constantes.CAMPO_OBRIGATORIO + "\n");

            retorno = false;

        } else {

            if (TSUtil.isEmpty(model.getOrigemModel())) {

                if (!TSUtil.isEmpty(model.getOrigemModel().getId())) {

                    if (model.getOrigemModel().getId() != 1) {

                        this.info.append(Constantes.OBJETO_ORIGEM_EASYCLASS + Constantes.CAMPO_OBRIGATORIO + "\n");

                        retorno = false;

                    }

                }

            }
        }

        return retorno;

    }

}
